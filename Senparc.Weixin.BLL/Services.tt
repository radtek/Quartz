<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#> <#//引进TT模板的命名空间#>  
<#@ output extension=".cs" #>

<#

CodeGenerationTools code = new CodeGenerationTools(this);

MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\\Quartz.Entity\\QuartzModel.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
#>

<#//使用TT模板生成代码的片段#> 

using System.Text;
using System.Threading.Tasks;
 
namespace Senparc.Weixin.BLL
{
	using System.Collections.Generic;
	using System.Linq;
	using Senparc.Weixin.DAL;
	using Senparc.Weixin.IBLL;
	using Senparc.Weixin.IDAL;
	using Quartz.Entity;

<#
	//在这里需要一个for循环来遍历数据库中所有的表放置在下面即可，这样就实现了所有的表对应的仓储显示出来了
	//使用foreach循环遍历ItemCollection.GetItems<EntityType>集合

	foreach(EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e=>e.Name))
	{ #>

	/// <summary>
    /// <#=entity.Name#>Service
    /// </summary>
	public partial class <#=entity.Name#>Service : BaseService<<#=entity.Name#>>, I<#=entity.Name#>Service
    {
		//只要想操作数据库，我们只要拿到DBSession就行
        public override void SetCurrentRepository()
        {
            CurrentRepository = _DbSession.<#=entity.Name#>Repository;
        }

        /// <summary>
        /// 执行Sql语句的方法  EF5.0的写法
        /// EF4.0的写法   int ExcuteSql(string strSql, ObjectParameter[] parameters);
        /// </summary>
        /// <param name="strSql">执行的SQL语句</param>
        /// <param name="parameters">参数</param>
        /// <returns>返回int类型</returns>
		public  int ExcuteSql(string strSql, System.Data.Common.DbParameter[] parameters)
        {

            return _DbSession.ExcuteSql(strSql, parameters);

        }


        /// <summary>
        /// 执行SQL语句或存储过程 返回IEnumerable<<#=entity.Name#>>
        /// </summary>
        /// <typeparam name="<#=entity.Name#>"></typeparam>
        /// <param name="strSql"></param>
        /// <param name="parameters"></param>
        /// <returns>IEnumerable<<#=entity.Name#>></returns>
		public  IEnumerable<<#=entity.Name#>> ExcuteSqlGetIEnumerable<<#=entity.Name#>>(string strSql, System.Data.Common.DbParameter[] parameters)
        {

            return _DbSession.ExcuteSqlGetIEnumerable<<#=entity.Name#>>(strSql, parameters);
        }


        /// <summary>
        /// 执行SQL语句或存储过程返回 IQueryable<<#=entity.Name#>>
        /// </summary>
        /// <typeparam name="<#=entity.Name#>"></typeparam>
        /// <param name="strSql"></param>
        /// <param name="parameters"></param>
        /// <returns>IQueryable<<#=entity.Name#>></returns>
        public IQueryable<<#=entity.Name#>> ExcuteSqlGetIQueryable<<#=entity.Name#>>(string strSql, System.Data.Common.DbParameter[] parameters)
        {
            return _DbSession.ExcuteSqlGetIQueryable<<#=entity.Name#>>(strSql, parameters);
        }



	}


<#}#>

}